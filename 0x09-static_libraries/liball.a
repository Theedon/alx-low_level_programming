!<arch>
0-isupper.c/    0           0     0     644     221       `
#include "main.h"

/**
 *_isupper - check if character is capital letter
 *@c: input parameter
 *
 *Return: return int
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

0-memset.c/     0           0     0     644     237       `
#include "main.h"

/**
 *_memset - function
 *@s: input
 *@b: input
 *@n: input
 *Return: return character
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     324       `
#include "main.h"

/**
 *_strcat - function
 *@dest: parameter
 *@src: parameter
 *Return: return string
 */

char *_strcat(char *dest, char *src)
{
	int i = 0;
	int j = 0;
	int k;

	while (dest[i])
		i++;
	while (src[j])
		j++;

	for (k = 0; k < j; k++)
	{
		dest[i] = src[k];
		i++;
	}
	dest[i] = '\0';

	return (dest);
}
1-isdigit.c/    0           0     0     644     252       `
#include "main.h"

/**
 *_isdigit - function to calculate if input is a digit
 *@c: input integer parameter
 *
 *Return: return 1 if digit and 0 otherwise
 */

int _isdigit(int  c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
		return (0);
}
1-memcpy.c/     0           0     0     644     262       `
#include "main.h"

/**
 *_memcpy - function
 *@dest: input
 *@src: input
 *@n: input
 *Return: return char
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		*(dest + i) = *(src + i);
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     358       `
#include "main.h"

/**
 *_strncat - function
 *@dest: parameter
 *@src: parameter
 *@n: parameter
 *Return: string
 */

char *_strncat(char *dest, char *src, int n)
{
	int destlen = 0;
	int i;

	while (dest[destlen])
		destlen++;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[destlen + i] = src[i];
	}

	dest[destlen + i] = '\0';


	return (dest);
}
100-atoi.c/     0           0     0     644     594       `
#include "main.h"

/**
 * _atoi - converts a string to an integer
 * @s: string to be converted
 *
 * Return: the int converted from the string
 */
int _atoi(char *s)
{
	int i, d, n, len, f, digit;

	i = 0;
	d = 0;
	n = 0;
	len = 0;
	f = 0;
	digit = 0;

	while (s[len] != '\0')
		len++;

	while (i < len && f == 0)
	{
		if (s[i] == '-')
			++d;

		if (s[i] >= '0' && s[i] <= '9')
		{
			digit = s[i] - '0';
			if (d % 2)
				digit = -digit;
			n = n * 10 + digit;
			f = 1;
			if (s[i + 1] < '0' || s[i + 1] > '9')
				break;
			f = 0;
		}
		i++;
	}

	if (f == 0)
		return (0);

	return (n);
}
2-strchr.c/     0           0     0     644     328       `
#include "main.h"
#include <stdio.h>

/**
 *_strchr - function
 *@s: input
 *@c: input
 *Return: return char
 */

char *_strchr(char *s, char c)
{
	int i;
	int present = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == c)
		{
			present += 1;
			break;
		}

	}

	if (present == 0)
		return (NULL);
	else
		return (s + i);
}
2-strlen.c/     0           0     0     644     187       `
#include <stdio.h>

/**
 *_strlen - function
 *@s: parameter
 *Return: return length of string
 */

int _strlen(char *s)
{
	int j = 0;

	while (s[j] != '\0')
	{
		j++;
	}

	return (j);
}

2-strncpy.c/    0           0     0     644     364       `
#include "main.h"

/**
 *_strncpy - function
 *@dest: parameter
 *@src: parameter
 *@n: parameter
 *Return: stringx
 */

char *_strncpy(char *dest, char *src, int n)
{
	int srclen = 0;
	int i;

	while (src[srclen])
		srclen++;


	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}

	for (; i < n; i++)
	{
		dest[i] = '\0';
	}



	return (dest);
}
3-islower.c/    0           0     0     644     243       `
#include "main.h"

/**
 *_islower - function to check if alphabet is lower case
 *@c: the character to be checked
 *
 *Return: return 0 or 1
 */

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

3-puts.c/       0           0     0     644     195       `
#include "main.h"

/**
 *_puts - function
 *@str: input
 *Return: return void
 */

void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     442       `
#include "main.h"

/**
 *_strcmp - function
 *@s1: parameter
 *@s2: parameter
 *Return: return integer
 */

int _strcmp(char *s1, char *s2)
{
	int i;
	int value = 0;
	int len_s1 = 0;
	int len_s2 = 0;

	while (*(s1 + len_s1))
	{
		len_s1++;
	}
	while (*(s2 + len_s2))
	{
		len_s2++;
	}

	for (i = 0; s1[i] != 0 && s2[i] != 0; i++)
	{
		if (s1[i] == s2[i])
			continue;
		else
		{
			value = s1[i] - s2[i];
			break;
		}

	}
	return (value);
}
3-strspn.c/     0           0     0     644     362       `
#include "main.h"

/**
 *_strspn - function
 *@s: input
 *@accept: input
 *Return: return int
 */

unsigned int _strspn(char *s, char *accept)
{
	char *p;
	char *a;
	int count = 0;

	for (p = s; *p != '\0'; p++)
	{
		for (a = accept; *a != '\0'; a++)
		{
			if (*p == *a)
			{
				count++;
				break;
			}
		}

		if (*a == '\0')
			break;
	}

	return (count);
}
4-isalpha.c/    0           0     0     644     277       `
#include "main.h"

/**
 *_isalpha - function to check if character is an alphabet
 *@c: character
 *Return: returns 0 or 1
 */

int _isalpha(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

4-strpbrk.c/    0           0     0     644     290       `
#include "main.h"

/**
 *_strpbrk - function
 *@s: input
 *@accept: input
 *Return: return char
 */

char *_strpbrk(char *s, char *accept)
{
	char *p;
	char *a;

	for (p = s; *p != 0; p++)
	{
		for (a = accept; *a != '\0'; a++)
		{
			if (*p == *a)
				return (p);
		}
	}
	return ('\0');
}
5-strstr.c/     0           0     0     644     512       `
#include "main.h"
#include <stdio.h>

/**
 * *_strstr - locates a substring
 * @haystack: string to search in
 * @needle: substring to look for
 *
 * Return: pointer to the beginning of the located substring
 * or NULL if the substring is not found
 */
char *_strstr(char *haystack, char *needle)
{
	int i, j;

	for (i = 0; haystack[i] != '\0'; i++)
	{
		for (j = 0; needle[j] != '\0'; j++)
		{
			if (haystack[i + j] != needle[j])
				break;
		}
		if (!needle[j])
			return (&haystack[i]);
	}
	return (NULL);
}
6-abs.c/        0           0     0     644     198       `
#include "main.h"

/**
 *_abs - get absolute value of an integer
 *@n: integer input
 *
 *Return: returns 0 or 1
 */

int _abs(int n)
{
	if (n >= 0)
	{
		return (n);
	}
	else
	{
		return (-n);
	}
}
9-strcpy.c/     0           0     0     644     359       `
#include "main.h"

/**
 *_strcpy - function that copies a string from one location to another
 *@dest: destination pointer
 *@src: source pointer
 *Return: return a pointer to the address of the beginning of the contiguous
 *location
 */

char *_strcpy(char *dest, char *src)
{
	int i = 0;

	while (src[i])
	{
		dest[i] = src[i];
		i++;
	}

	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

